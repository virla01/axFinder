
    container.innerHTML = axFinderHTML;

    loadFolders(); // Cargar carpetas dinámicamente

    // Añadir Event Listeners para la funcionalidad de la UI
    // Los event listeners para las carpetas se añadirán en loadFolders

    const gridBtn = document.getElementById('grid-btn');
    if (gridBtn) {
        gridBtn.addEventListener('click', () => setViewMode('grid'));
    }

    const listBtn = document.getElementById('list-btn');
    if (listBtn) {
        listBtn.addEventListener('click', () => setViewMode('list'));
    }

    // Ejemplo para file-item, necesitará ser más dinámico si hay muchos items
    const fileItem = document.querySelector('.file-item[data-file-id="1"]');
    if (fileItem) {
        fileItem.addEventListener('click', () => toggleFileSelection(1));
    }

    // Lógica para probar la conexión con files.php
    const testButton = document.getElementById('ax-test-button');
    const statusDiv = document.getElementById('ax-status');

    if (testButton && statusDiv) {
        testButton.addEventListener('click', () => {
            statusDiv.textContent = 'Estado: Conectando...';
            fetch('./src/api/files.php?action=test')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Error del servidor: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Respuesta de la API:', data);
                    statusDiv.textContent = `Estado: Conectado. Mensaje: ${data.message || JSON.stringify(data)}`;
                    if (data.baseDir_configurado) { // Ajustado para coincidir con la respuesta de la API
                        statusDiv.innerHTML += `<br>BaseDir configurado: ${data.baseDir_configurado}`;
                    }
                })
                .catch(error => {
                    console.error('Error al conectar con la API:', error);
                    statusDiv.textContent = `Estado: Error de conexión. ${error.message}`;
                });
        });
    }

    console.log('AxFinder inicializado con nuevo template.');
}

function loadFolders() {
    const foldersContainer = document.getElementById('sidebar-folders-container');
    if (!foldersContainer) {
        console.error('Error: No se encontró el contenedor de carpetas del sidebar.');
        return;
    }
    foldersContainer.innerHTML = `
        <div class="flex items-center justify-center p-4">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-sm text-gray-600">Cargando directorios...</p>
        </div>
    `;

    fetch('src/api/files.php?action=list_folders')
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error del servidor al listar carpetas: ${response.status}`);
            }
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.indexOf('application/json') !== -1) {
                return response.json();
            } else {
                return response.text().then(text => {
                    throw new Error(`Respuesta inesperada del servidor (no JSON): ${response.status} ${response.statusText}. Contenido: ${text.substring(0, 200)}...`);
                });
            }
        })
        .then(data => {
            if (data.success && data.folders) {
                foldersContainer.innerHTML = '';
                if (data.folders.length === 0) {
                    foldersContainer.innerHTML = '<p class="p-2 text-xs text-gray-500">No hay carpetas en el directorio.</p>';
                    return;
                }
                data.folders.forEach(folder => {
                    const folderId = folder.name.replace(/\s+/g, '-').toLowerCase();
                    const folderElement = document.createElement('div');
                    folderElement.classList.add('tree-folder');
                    // Usar el SVG del icono directamente desde folder.icon o el 'folderClosed' de config.php como fallback
                    const iconHtml = folder.icon ? folder.icon : '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z" class="ax-secondary"/></svg>'; // Icono folderClosed de config.php
                    // SVG para los chevrons
                    const chevronRightIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="w-3 h-3 fill-current text-gray-500 transition-transform duration-200 ease-in-out"><path d="M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.62c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z"/></svg>';
                    const chevronDownIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="w-3 h-3 fill-current text-gray-500 transition-transform duration-200 ease-in-out transform rotate-90"><path d="M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z"/></svg>';

                    let chevronPlaceholderHTML = '';
                    if (folder.hasSubfolders) {
                        chevronPlaceholderHTML = `<div class="w-4 h-5 flex items-center justify-center mr-1" id="${folderId}-chevron-placeholder">${chevronRightIcon}</div>`;
                    } else {
                        chevronPlaceholderHTML = '<div class="w-4 h-5 flex items-center justify-center mr-1"></div>'; // Mantiene el espacio para alineación
                    }

                    folderElement.innerHTML = `
                        <div class="flex items-center p-2 mb-2 hover:bg-blue-100 cursor-pointer text-sm font-bold transition-colors" id="folder-${folderId}">
                            ${chevronPlaceholderHTML}
                            <div class="w-5 h-5" id="${folderId}-icon-container">
                                ${iconHtml} <!-- Insertar el SVG aquí -->
                            </div>
                            <span class="text-gray-800 ml-2">${folder.name}</span>
                        </div>
                        <div class="ml-5 space-y-1 hidden" id="${folderId}-children">
                            <!-- Sub-elementos -->
                        </div>
                    `;
                    foldersContainer.appendChild(folderElement);

                    const clickableFolderHeader = document.getElementById(`folder-${folderId}`);
                    if (clickableFolderHeader) {
                        clickableFolderHeader.addEventListener('click', () => {
                            const isOpening = toggleFolder(folderId, folder.name, folder.hasSubfolders);
                            const iconContainer = document.getElementById(`${folderId}-icon-container`);
                            if (iconContainer) {
                                const folderOpenIcon = folder.icons?.folderOpen || '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" class="w-auto h-5"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M69.08 271.63L0 390.05V112a48 48 0 0 1 48-48h160l64 64h160a48 48 0 0 1 48 48v48H152a96.31 96.31 0 0 0-82.92 47.63z" class="ax-secondary"/><path d="M152 256h400a24 24 0 0 1 20.73 36.09l-72.46 124.16A64 64 0 0 1 445 448H45a24 24 0 0 1-20.73-36.09l72.45-124.16A64 64 0 0 1 152 256z" class="ax-primary"/></svg>';
                                const folderClosedIcon = folder.icons?.folderClosed || '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-auto h-5"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z" class="ax-secondary"/></svg>';
                                iconContainer.innerHTML = isOpening ? folderOpenIcon : folderClosedIcon;
                            }
                            // Marcar como activo y desmarcar otros
                            document.querySelectorAll('#sidebar-folders-container .bg-blue-100').forEach(item => {
                                item.classList.remove('bg-blue-100');
                            });
                            clickableFolderHeader.classList.add('bg-blue-100');
                        });
                    }
                });
            } else {
                console.error('Error al cargar carpetas:', data.message || 'Respuesta no exitosa o formato incorrecto.');
                foldersContainer.innerHTML = `<p class="p-2 text-xs text-red-500">Error al procesar datos de carpetas: ${data.message || 'Formato inesperado.'}</p>`;
            }
        })
        .catch(error => {
            console.error('Error en fetch al cargar carpetas:', error);
            foldersContainer.innerHTML = `<p class="p-2 text-xs text-red-500">Error de conexión al cargar carpetas: ${error.message}</p>`;
        });
}

function toggleFolder(folderId, folderPath, hasSubfolders) {
    console.log(`Toggle folder: ${folderId}, Path: ${folderPath}`);
    const childrenContainer = document.getElementById(`${folderId}-children`);
    let isOpening = false;
    const chevronRightIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="w-3 h-3 fill-current text-gray-500 transition-transform duration-200 ease-in-out"><path d="M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.62c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z"/></svg>';
    const chevronDownIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="w-3 h-3 fill-current text-gray-500 transition-transform duration-200 ease-in-out"><path d="M224 416c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L224 338.8l169.4-169.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-192 192C240.4 412.9 232.2 416 224 416z"/></svg>';
    const chevronPlaceholder = document.getElementById(`${folderId}-chevron-placeholder`);

    if (childrenContainer) {
        childrenContainer.classList.toggle('hidden');
        isOpening = !childrenContainer.classList.contains('hidden');
        console.log(`[toggleFolder] Folder: ${folderId}, Path: ${folderPath}, Opening: ${isOpening}, Children HTML: '${childrenContainer.innerHTML.trim()}'`);

        if (hasSubfolders && chevronPlaceholder) {
            chevronPlaceholder.innerHTML = isOpening ? chevronDownIcon : chevronRightIcon;
        }

        if (isOpening && childrenContainer.innerHTML.trim() === '<!-- Sub-elementos -->') {
            loadSubFolders(folderId, folderPath, childrenContainer);
        }
    }
    // Actualizar la ruta actual y cargar contenido
    loadFiles(folderPath, currentSortOrder.column, currentSortOrder.direction);
    return isOpening; // Devuelve true si la carpeta se está abriendo, false si se está cerrando
}

function loadSubFolders(parentFolderId, parentFolderPath, childrenContainer) {
    childrenContainer.innerHTML = `
        <div class="flex items-center justify-start p-2 pl-0">
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-xs text-gray-500">Cargando...</p>
        </div>
    `;

    fetch(`src/api/files.php?action=list_folders&path=${encodeURIComponent(parentFolderPath)}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error del servidor al listar subcarpetas: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`[loadSubFolders] Data for ${parentFolderPath}:`, JSON.stringify(data));
            if (data.success && data.folders) {
                childrenContainer.innerHTML = ''; // Limpiar el mensaje de carga
                if (data.folders.length === 0) {
                    childrenContainer.innerHTML = '<p class="p-2 text-xs text-gray-500">No hay subcarpetas.</p>';
                    return;
                }
                data.folders.forEach(folder => {
                    // Usar folder.path que es relativo a baseDir, o construirlo si es necesario.
                    // Para el ID, podemos añadir el prefijo del padre para asegurar unicidad si hay nombres repetidos en diferentes niveles.
                    const subFolderId = `${parentFolderId}-${folder.name.replace(/\s+/g, '-').toLowerCase()}`;
                    const subFolderElement = document.createElement('div');
                    subFolderElement.classList.add('tree-folder');

                    const iconHtml = folder.icon ? folder.icon : '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z" class="ax-secondary"/></svg>';

                    const chevronRightIcon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" class="w-3 h-3 fill-current text-gray-500 transition-transform duration-200 ease-in-out"><path d="M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.62c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z"/></svg>';
                    let chevronPlaceholderHTML = '';
                    if (folder.hasSubfolders) {
                        chevronPlaceholderHTML = `<div class="w-4 h-5 flex items-center justify-center mr-1" id="${subFolderId}-chevron-placeholder">${chevronRightIcon}</div>`;
                    } else {
                        chevronPlaceholderHTML = '<div class="w-4 h-5 flex items-center justify-center mr-1"></div>'; // Mantiene el espacio para alineación
                    }

                    subFolderElement.innerHTML = `
                        <div class="flex items-center p-2 pl-4 mb-1 hover:bg-blue-100 cursor-pointer text-sm font-semibold transition-colors" id="folder-${subFolderId}">
                            ${chevronPlaceholderHTML}
                            <div class="w-5 h-5" id="${subFolderId}-icon-container">
                                ${iconHtml}
                            </div>
                            <span class="text-gray-700 ml-2">${folder.name}</span>
                        </div>
                        <div class="ml-10 space-y-1 hidden" id="${subFolderId}-children">
                            <!-- Sub-elementos -->
                        </div>
                    `;
                    childrenContainer.appendChild(subFolderElement);

                    const clickableSubFolderHeader = document.getElementById(`folder-${subFolderId}`);
                    if (clickableSubFolderHeader) {
                        clickableSubFolderHeader.addEventListener('click', (event) => {
                            event.stopPropagation(); // Evitar que el evento de clic se propague al contenedor padre
                            const isOpening = toggleFolder(subFolderId, folder.path, folder.hasSubfolders);
                            const iconContainer = document.getElementById(`${subFolderId}-icon-container`);
                            if (iconContainer) {
                                const folderOpenIcon = folder.icons?.folderOpen || '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" class="w-auto h-5"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M69.08 271.63L0 390.05V112a48 48 0 0 1 48-48h160l64 64h160a48 48 0 0 1 48 48v48H152a96.31 96.31 0 0 0-82.92 47.63z" class="ax-secondary"/><path d="M152 256h400a24 24 0 0 1 20.73 36.09l-72.46 124.16A64 64 0 0 1 445 448H45a24 24 0 0 1-20.73-36.09l72.45-124.16A64 64 0 0 1 152 256z" class="ax-primary"/></svg>';
                                const folderClosedIcon = folder.icons?.folderClosed || '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-auto h-5"><defs><style>.ax-secondary{opacity:.4}</style></defs><path d="M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z" class="ax-secondary"/></svg>';
                                iconContainer.innerHTML = isOpening ? folderOpenIcon : folderClosedIcon;
                            }
                            document.querySelectorAll('#sidebar-folders-container .bg-blue-100').forEach(item => {
                                item.classList.remove('bg-blue-100');
                            });
                            clickableSubFolderHeader.classList.add('bg-blue-100');
                        });
                    }
                });
            } else {
                childrenContainer.innerHTML = `<p class="p-2 text-xs text-red-500">Error al cargar subcarpetas: ${data.message || 'Formato inesperado.'}</p>`;
            }
        })
        .catch(error => {
            console.error('Error en fetch al cargar subcarpetas:', error);
            childrenContainer.innerHTML = `<p class="p-2 text-xs text-red-500">Error de conexión: ${error.message}</p>`;
        });
}

// La definición de ICONS y getFileIcon se moverá a la configuración del backend (config.php)
// let ICONS = {}; // Se obtendrá del backend
// function getFileIcon(fileName) { /* Se obtendrá/adaptará del backend */ return 'file'; }

function loadFiles(folderName, sortBy = 'name', sortOrder = 'asc') {
    const fileView = document.getElementById('file-view');
    const currentFolderDisplay = document.getElementById('current-folder-display'); // Actualizado
    const itemsCountDisplay = document.getElementById('items-count-display'); // Actualizado

    if (!fileView || !currentFolderDisplay || !itemsCountDisplay) { // Actualizado
        console.error('Error: No se encontró el contenedor de vista de archivos (ID: file-view), de ruta actual (ID: current-folder-display) o de conteo de items (ID: items-count-display). Verifique el HTML.');
        const mainContentArea = document.getElementById('main-content-area');
        if (mainContentArea) mainContentArea.innerHTML = '<p class="p-4 text-red-600 font-bold">Error Crítico: Elementos de la interfaz no encontrados.</p>';
        return;
    }

    currentFolderDisplay.textContent = folderName ? `/${folderName}` : '/'; // Actualizado
    itemsCountDisplay.textContent = ''; // Limpiar conteo mientras carga

    // Limpiar solo los contenedores de items, no todo fileView.
    const gridViewContainer = document.getElementById('grid-view-container');
    const listViewContainer = document.getElementById('list-view-container');

    if (!gridViewContainer || !listViewContainer) {
        console.error('Error: No se encontraron los contenedores grid-view-container o list-view-container.');
        fileView.innerHTML = '<p class="p-4 text-red-500">Error de renderizado: contenedores de vista no encontrados.</p>';
        return;
    }

    gridViewContainer.innerHTML = '';
    listViewContainer.innerHTML = '';

    // Mostrar indicador de carga en el contenedor activo
    if (!gridViewContainer.classList.contains('hidden')) {
        gridViewContainer.innerHTML = '<p class="p-4 text-gray-500">Cargando archivos...</p>';
    } else if (!listViewContainer.classList.contains('hidden')) {
        listViewContainer.innerHTML = '<p class="p-4 text-gray-500">Cargando archivos...</p>';
    } else { // Si ambos están ocultos (estado inicial o error), ponerlo en grid por defecto
        gridViewContainer.innerHTML = '<p class="p-4 text-gray-500">Cargando archivos...</p>';
    }

    fetch(`./src/api/files.php?action=list_files&folder=${encodeURIComponent(folderName)}&sortBy=${sortBy}&sortOrder=${sortOrder}`)
        .then(response => {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.indexOf('application/json') !== -1) {
                return response.json();
            } else {
                return response.text().then(text => {
                    throw new Error(`Respuesta inesperada del servidor (no JSON): ${response.status} ${response.statusText}. Contenido: ${text.substring(0, 200)}...`);
                });
            }
        })
        .then(data => {
            // Primero obtenemos las referencias a los contenedores
            const gridViewContainer = document.getElementById('grid-view-container');
            const listViewContainer = document.getElementById('list-view-container');

            // Verificamos que los contenedores existan ANTES de intentar usarlos o limpiarlos
            if (!gridViewContainer || !listViewContainer) {
                console.error('Error crítico: grid-view-container o list-view-container no encontrados DESPUÉS del fetch. Esto no debería suceder.');
                if (fileView) fileView.innerHTML = '<p class="p-4 text-red-500">Error fatal de renderizado. Contacte al administrador.</p>';
                return;
            }

            // Limpiar los contenedores específicos, no todo fileView
            gridViewContainer.innerHTML = '';
            listViewContainer.innerHTML = '';

            if (data.success && data.items) {
                if (data.items.length === 0) {
                    // Mostrar mensaje de carpeta vacía en el contenedor activo
                    if (!gridViewContainer.classList.contains('hidden')) {
                        gridViewContainer.innerHTML = '<p class="p-4 text-gray-500">Esta carpeta está vacía.</p>';
                    } else {
                        listViewContainer.innerHTML = '<p class="p-4 text-gray-500">Esta carpeta está vacía.</p>';
                    }
                    return;
                }

                // Determinar el modo de vista actual para renderizar
                // const gridViewContainer = document.getElementById('grid-view-container'); // Ya definido arriba
                // const listViewContainer = document.getElementById('list-view-container'); // Ya definido arriba
                const isGridViewActive = !gridViewContainer.classList.contains('hidden');

                // El indicador de carga ya fue limpiado arriba.

                const itemsContainer = isGridViewActive ? gridViewContainer : listViewContainer;

                data.items.forEach(item => {
                    const itemIconSvg = item.icon || ''; // SVG del icono desde el backend

                    // Crear elemento para la vista Grid
                    const gridItem = document.createElement('div');
                    gridItem.className = 'file-item group bg-white p-3 rounded-lg shadow hover:shadow-md transition-shadow cursor-pointer flex flex-col items-center text-center';
                    gridItem.setAttribute('data-file-id', item.name);
                    gridItem.setAttribute('data-file-type', item.type);

                    if (item.type === 'folder') {
                        const folderIconHtml = `<div class="w-16 h-16 text-blue-500 mb-2 flex items-center justify-center">${itemIconSvg}</div>`;
                        gridItem.innerHTML = `
                            ${folderIconHtml}
                            <span class="text-sm font-medium text-gray-700 truncate w-full">${item.name}</span>
                        `;
                    } else if (item.imageUrl) { // Si es una imagen y tiene imageUrl para la miniatura
                        // Aplicar el nuevo diseño para imágenes
                        gridItem.className = 'file-item group shadow hover:shadow-md transition-shadow cursor-pointer'; // Clases base del div principal

                        const imgElement = document.createElement('img');
                        imgElement.src = item.imageUrl;
                        imgElement.alt = item.name;
                        imgElement.className = 'w-full h-24 object-cover';
                        gridItem.appendChild(imgElement);

                        const infoDiv = document.createElement('div');
                        infoDiv.className = 'bg-white p-3 rounded-b-lg flex flex-col items-center text-center h-18';

                        const nameSpan = document.createElement('span');
                        nameSpan.className = 'text-sm font-medium text-gray-700 truncate w-full mt-1';
                        nameSpan.textContent = item.name;
                        infoDiv.appendChild(nameSpan);

                        if (item.size) {
                            const sizeSpan = document.createElement('span');
                            sizeSpan.className = 'text-xs text-gray-500';
                            sizeSpan.textContent = item.size;
                            infoDiv.appendChild(sizeSpan);
                        }
                        gridItem.appendChild(infoDiv);

                    } else { // Para otros archivos, usar el SVG del icono genérico de archivo
                        const fileIconHtml = `<div class="w-16 h-16 text-gray-400 mb-2 flex items-center justify-center">${itemIconSvg}</div>`;
                        gridItem.innerHTML = `
                            ${fileIconHtml}
                            <span class="text-sm font-medium text-gray-700 truncate w-full">${item.name}</span>
                            ${item.size ? `<span class="text-xs text-gray-500">${item.size}</span>` : ''}
                        `;
                    }

                    // Crear elemento para la vista Lista
                    const listItem = document.createElement('div');
                    listItem.className = 'file-item-list group bg-white p-2.5 rounded-md shadow-sm hover:bg-blue-50 transition-colors cursor-pointer flex items-center space-x-3';
                    listItem.setAttribute('data-file-id', item.name);
                    listItem.setAttribute('data-file-type', item.type);

                    let listIconHtml = '';
                    if (item.type === 'folder') {
                        listIconHtml = `<div class="w-6 h-6 text-blue-500 flex items-center justify-center">${itemIconSvg}</div>`;
                        listItem.addEventListener('click', () => {
                            const newPath = `${folderPath ? folderPath + '/' : ''}${item.name}`;
                            loadFiles(newPath);
                        });
                    } else if (item.imageUrl) {
                        listIconHtml = `<img src="${item.imageUrl}" alt="${item.name}" class="w-8 h-8 object-cover rounded">`;
                    } else {
                        listIconHtml = `<div class="w-6 h-6 text-gray-400 flex items-center justify-center">${itemIconSvg}</div>`;
                    }

                    listItem.innerHTML = `
                        <div class="flex-shrink-0">
                            ${listIconHtml}
                        </div>
                        <div class="flex-1 min-w-0">
                            <p class="text-sm font-medium text-gray-800 truncate">${item.name}</p>
                            <p class="text-xs text-gray-500 truncate">${item.type === 'folder' ? 'Carpeta' : 'Archivo'}${item.size ? ` - ${item.size}` : ''}</p>
                        </div>
                        <div class="text-xs text-gray-400 group-hover:text-blue-600">
                            <!-- Acciones o fecha -->
                        </div>
                    `;

                    // Añadir al contenedor correspondiente según la vista activa
                    if (isGridViewActive) {
                        gridViewContainer.appendChild(gridItem);
                    } else {
                        listViewContainer.appendChild(listItem);
                    }
                });

            } else {
                console.error('Error al cargar archivos:', data.message || 'Respuesta no exitosa');
                fileView.innerHTML = `<p class="p-4 text-red-500">Error al cargar archivos: ${data.message || 'Error desconocido'}</p>`;
            }
        })
        .catch(error => {
            console.error('Error en fetch al cargar archivos:', error);
            fileView.innerHTML = `<p class="p-4 text-red-500">Error de conexión al cargar archivos: ${error.message}</p>`;
        });
}

function clearFileView() {
    const fileView = document.getElementById('file-view');
    const currentPathElement = document.getElementById('current-path');
    if (fileView) {
        fileView.innerHTML = '<p class="p-4 text-gray-500">Seleccione una carpeta para ver los archivos.</p>';
    }
    if (currentPathElement) {
        currentPathElement.textContent = '/';
    }
}

function setViewMode(mode) {
    console.log(`setViewMode llamado con: ${mode}`);
    const gridViewContainer = document.getElementById('grid-view-container');
    const listViewContainer = document.getElementById('list-view-container');
    const gridBtn = document.getElementById('grid-btn');
    const listBtn = document.getElementById('list-btn');

    if (gridViewContainer && listViewContainer && gridBtn && listBtn) {
        const currentFolderDisplayElement = document.getElementById('current-folder-display');
        const currentFolder = currentFolderDisplayElement ? currentFolderDisplayElement.textContent.substring(1) || '' : '';
        const isActiveViewChanging = (mode === 'grid' && gridViewContainer.classList.contains('hidden')) ||
            (mode === 'list' && listViewContainer.classList.contains('hidden'));

        if (mode === 'grid') {
            gridViewContainer.classList.remove('hidden');
            listViewContainer.classList.add('hidden');
            gridBtn.classList.add('bg-blue-100', 'text-blue-600');
            gridBtn.classList.remove('text-gray-600', 'hover:bg-blue-50');
            listBtn.classList.add('text-gray-600', 'hover:bg-blue-50');
            listBtn.classList.remove('bg-blue-100', 'text-blue-600');
        } else if (mode === 'list') {
            listViewContainer.classList.remove('hidden');
            gridViewContainer.classList.add('hidden');
            listBtn.classList.add('bg-blue-100', 'text-blue-600');
            listBtn.classList.remove('text-gray-600', 'hover:bg-blue-50');
            gridBtn.classList.add('text-gray-600', 'hover:bg-blue-50');
            gridBtn.classList.remove('bg-blue-100', 'text-blue-600');
        }

        const gridIsEmpty = gridViewContainer.innerHTML.includes('Seleccione una carpeta') || gridViewContainer.innerHTML.includes('Esta carpeta está vacía') || gridViewContainer.innerHTML === '';
        const listIsEmpty = listViewContainer.innerHTML.includes('Seleccione una carpeta') || listViewContainer.innerHTML.includes('Esta carpeta está vacía') || listViewContainer.innerHTML === '';

        if (isActiveViewChanging && ((mode === 'grid' && gridIsEmpty && !listIsEmpty) || (mode === 'list' && listIsEmpty && !gridIsEmpty) || !gridIsEmpty || !listIsEmpty)) {
            // Siempre recargar usando currentSortOrder al cambiar de vista si hay contenido o es la raíz
            const currentPathDisplay = document.getElementById('current-folder-display');
            if (currentPathDisplay && (currentPathDisplay.textContent !== '/' || currentFolder === '')) {
                loadFiles(currentFolder, currentSortOrder.column, currentSortOrder.direction);
            } else {
                if (mode === 'grid') gridViewContainer.innerHTML = '<p class="p-4 text-gray-500">Seleccione una carpeta.</p>';
                if (mode === 'list') listViewContainer.innerHTML = '<p class="p-4 text-gray-500">Seleccione una carpeta.</p>';
            }
        }
    } else {
        console.error('Error: No se pudieron encontrar los elementos para cambiar la vista.');
    }
}

function toggleFileSelection(fileId) {
    console.log(`toggleFileSelection llamado para: ${fileId}`);
    // Implementar lógica de selección de archivos
}

// Si no estás usando módulos, la función initAxFinder ya está en el ámbito global.
// Si en el futuro decides volver a usar módulos, necesitarías exportarla:
// export { initAxFinder };